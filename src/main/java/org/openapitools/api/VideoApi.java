/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Comments;
import org.openapitools.model.GetDataVideoById200Response;
import org.openapitools.model.Video;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-10-15T15:54:30.961535300+02:00[Europe/Madrid]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "video", description = "Operaciones sobre los videos")
public interface VideoApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /video : Crea un video
     * Solo se podra hacer si el usuario ha iniciado sesion.
     *
     * @param video Crea un objeto Video (optional)
     * @return operacion exitosa (status code 200)
     */
    @Operation(
        operationId = "createVideo",
        summary = "Crea un video",
        description = "Solo se podra hacer si el usuario ha iniciado sesion.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "default", description = "operacion exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Video.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/video",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Video> createVideo(
        @Parameter(name = "Video", description = "Crea un objeto Video") @Valid @RequestBody(required = false) Video video
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /video/preview/{id} : Borrar video
     * Solo se puede hacer si el usuario ha iniciado sesion.
     *
     * @param id El id del video a borrar (required)
     * @return operacion exitosa (status code 200)
     *         or Invalid id supplied (status code 400)
     *         or id not found (status code 404)
     */
    @Operation(
        operationId = "deleteVideo",
        summary = "Borrar video",
        description = "Solo se puede hacer si el usuario ha iniciado sesion.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "operacion exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid id supplied"),
            @ApiResponse(responseCode = "404", description = "id not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/video/preview/{id}"
    )
    
    default ResponseEntity<Void> deleteVideo(
        @Parameter(name = "id", description = "El id del video a borrar", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /video/preview/{id} : Obtener los datos de un video en especifico
     * Muestra los datos de un video en especifico
     *
     * @param id El id por el que se busca. Usar 1 para testing. (required)
     * @return operacion exitosa (status code 200)
     *         or Invalid video (status code 400)
     *         or video not found (status code 404)
     */
    @Operation(
        operationId = "getDataVideoById",
        summary = "Obtener los datos de un video en especifico",
        description = "Muestra los datos de un video en especifico",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "operacion exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetDataVideoById200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid video"),
            @ApiResponse(responseCode = "404", description = "video not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/video/preview/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetDataVideoById200Response> getDataVideoById(
        @Parameter(name = "id", description = "El id por el que se busca. Usar 1 para testing.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"comments\" : { \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"id\" : 0, \"video\" : 1, \"text\" : \"text\", \"user\" : 6 }, \"video\" : { \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /video/{id} : Hacer un get del video por su id
     * 
     *
     * @param id El id por el que se busca. Usar 1 para testing. (required)
     * @return operacion exitosa (status code 200)
     *         or Invalid id supplied (status code 400)
     *         or id not found (status code 404)
     */
    @Operation(
        operationId = "getVideoByid",
        summary = "Hacer un get del video por su id",
        description = "",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "operacion exitosa", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Video.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid id supplied"),
            @ApiResponse(responseCode = "404", description = "id not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/video/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Video> getVideoByid(
        @Parameter(name = "id", description = "El id por el que se busca. Usar 1 para testing.", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"duration\" : \"duration\", \"ageRestricted\" : true, \"uploadDate\" : \"2000-01-23T04:56:07.000+00:00\", \"countryRestricted\" : [ \"countryRestricted\", \"countryRestricted\" ], \"genre\" : \"genre\", \"description\" : \"description\", \"id\" : 0, \"title\" : \"title\", \"user\" : 1, \"likes\" : 6 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /video/preview/{id} : Actualizar video
     * Solo puede utilizarse si el usuario ha iniciado sesion.
     *
     * @param id el id del video a modificar (required)
     * @param video Modifica el video en la aplicacion (optional)
     * @return operacion exitosa (status code 200)
     *         or Invalid id supplied (status code 400)
     *         or id not found (status code 404)
     */
    @Operation(
        operationId = "updateVideo",
        summary = "Actualizar video",
        description = "Solo puede utilizarse si el usuario ha iniciado sesion.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "operacion exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid id supplied"),
            @ApiResponse(responseCode = "404", description = "id not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/video/preview/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> updateVideo(
        @Parameter(name = "id", description = "el id del video a modificar", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "Video", description = "Modifica el video en la aplicacion") @Valid @RequestBody(required = false) Video video
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }
    
    /**
     * POST /video/comment/{id} : Añadir comentario al video
     * Solo puede utilizarse si el usuario ha iniciado sesión.
     *
     * @param id el id del video al que se añade el comentario (required)
     * @param comment el comentario a añadir (required)
     * @return operacion exitosa (status code 201)
     *         or Invalid video id supplied (status code 400)
     *         or video not found (status code 404)
     */
    @Operation(
        operationId = "addCommentToVideo",
        summary = "Añadir comentario al video",
        description = "Solo puede utilizarse si el usuario ha iniciado sesión.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Comentario añadido exitosamente"),
            @ApiResponse(responseCode = "400", description = "Invalid video id supplied"),
            @ApiResponse(responseCode = "404", description = "video not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/video/comment",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addComment(
    		@Parameter(name = "comment", description = "Comentario a añadir al video", required = true, in = ParameterIn.DEFAULT) @Valid @RequestBody Comments comment
    ) {
    	return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
        }

    /**
     * GET /video/comments/{id} : Obtener los comentarios de un video
     * Muestra todos los comentarios asociados a un video específico.
     *
     * @param id El id del video del que se desean obtener los comentarios (required)
     * @return operacion exitosa (status code 200)
     *         or Invalid video id supplied (status code 400)
     *         or video not found (status code 404)
     */
    @Operation(
        operationId = "getCommentsForVideo",
        summary = "Obtener los comentarios de un video",
        description = "Muestra todos los comentarios asociados a un video específico.",
        tags = { "video" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid video id"),
            @ApiResponse(responseCode = "404", description = "Video not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/video/{id}/comments",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Comments>> getCommentsForVideo(
        @Parameter(name = "id", description = "El id del video del que se desean obtener los comentarios", required = true, in = ParameterIn.PATH) @PathVariable("id") int id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }
    
    
    /**
     * GET /users/{id}/videos/ : Obtener una lista de videos de un usuario.
     *
     * @param id El id del usuario (required)
     * @return Operación exitosa (status code 200)
     *         or Invalid resource id supplied (status code 400)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getVideosByUser",
        summary = "Obtener una lista de entidades asociadas a un recurso",
        description = "Muestra todas las entidades asociadas a un recurso específico.",
        tags = { "resource" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Operación exitosa"),
            @ApiResponse(responseCode = "400", description = "Invalid resource id"),
            @ApiResponse(responseCode = "404", description = "Resource not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}/videos/",
        produces = { "application/json" }
    )
     default ResponseEntity<List<Video>> getVideosbyUser(
        @Parameter(name = "id", description = "El id del usuario de los videos a obtener", required = true, in = ParameterIn.PATH) 
        @PathVariable("id") int id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

    
}
